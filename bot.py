from time import sleep
from flask import request
from telebot import types

from app import *
from models import *

from texts import texts as messages
from keyboards import *

import time
import flask
import telebot

from sqlalchemy import desc

states = {}

back_states = {}


def get_state(id):
    return states.get(id)


def update_state(id, state):
    global states
    states[id] = state


def get_back_state(id):
    update_state(id, '')
    return back_states.get(id)


def update_back_state(id, state):
    global back_states
    back_states[id] = state


def admin(fn):
    def wrapped(m):
        if m.from_user.id in admins:
            return fn(m)

    return wrapped


def generate_bugdet(count, budget):
    stavki = []
    if count == 3:
        stavki.append((budget / 100) * 15.8)
        stavki.append((budget / 100) * 23.7)
        stavki.append((budget / 100) * 59.92)

    if count == 4:
        stavki.append((budget / 100) * 6.2)
        stavki.append((budget / 100) * 9.3)
        stavki.append((budget / 100) * 23.25)
        stavki.append((budget / 100) * 58.13)

    if count == 5:
        stavki.append((budget / 100) * 2.5)
        stavki.append((budget / 100) * 3.75)
        stavki.append((budget / 100) * 9.38)
        stavki.append((budget / 100) * 23.45)
        stavki.append((budget / 100) * 58.62)

    if count == 6:
        stavki.append((budget / 100) * 1)
        stavki.append((budget / 100) * 1.5)
        stavki.append((budget / 100) * 3.75)
        stavki.append((budget / 100) * 9.38)
        stavki.append((budget / 100) * 23.45)
        stavki.append((budget / 100) * 58.62)

    if count == 7:
        stavki.append((budget / 100) * 0.4)
        stavki.append((budget / 100) * 0.6)
        stavki.append((budget / 100) * 1.5)
        stavki.append((budget / 100) * 3.75)
        stavki.append((budget / 100) * 9.38)
        stavki.append((budget / 100) * 23.45)
        stavki.append((budget / 100) * 58.62)

    if count == 8:
        stavki.append((budget / 100) * 0.15)
        stavki.append((budget / 100) * 0.23)
        stavki.append((budget / 100) * 0.57)
        stavki.append((budget / 100) * 1.43)
        stavki.append((budget / 100) * 3.57)
        stavki.append((budget / 100) * 8.93)
        stavki.append((budget / 100) * 22.32)
        stavki.append((budget / 100) * 55.8)

    return stavki


def accept_payment(amount, user_id, tariff_id):
    subscribe = Subscribes.query.get(int(tariff_id))
    if subscribe:
        Payments.new(user_id, amount, int(time.time()), tariff_id)

        user = Users.query.get(int(user_id))

        referal_owner = Referals.get_owner(user.id)
        if referal_owner:
            referal_owner_user = Users.query.get(referal_owner.owner_id)
            if referal_owner_user:
                referal_owner_user.balance = referal_owner_user.balance + int(subscribe.to_ref_money)

        user_subscribe = Subscribers.query.get(user.id)
        if user_subscribe:
            if user_subscribe.date_to_payment >= time.time():
                user_subscribe.date_to_payment = user_subscribe.date_to_payment + subscribe.time
            else:
                user_subscribe.date_to_payment = int(time.time()) + subscribe.time

        if not user_subscribe:
            user_subscribe = Subscribers(id=user.id, payment_date=int(time.time()),
                                         date_to_payment=int(time.time()) + subscribe.time)

        session.add(user_subscribe)
        session.add(user)
        session.add(referal_owner)
        session.commit()

    if not subscribe:
        for adm in admins:
            bot.send_message(adm, '–ü–æ—Å—Ç—É–ø–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {amount}|{user_id}|{tariff_id}')


@app.route('/bot/<token_f>', methods=['POST'])
def hooking_webhooks(token_f):
    if bot.token == token_f:
        if request.headers.get('content-type') == 'application/json':
            return '', 200
        else:
            flask.abort(403)


@app.route('/payment')
def accept_payment_flask():
    amount = request.args.get('AMOUNT')
    user_id = request.args.get('MERCHANT_ORDER_ID')
    plane = request.args.get('us_tariff')
    accept_payment(amount, user_id, plane)
    return ''


@bot.message_handler(func=lambda msg: msg.text == 'üîô–ù–∞–∑–∞–¥')
def back_function(msg):
    back_state = get_back_state(msg.from_user.id)
    if back_state:
        int_back_funcs[back_state](msg)

    if not back_state:
        start(msg)


@bot.message_handler(commands=['start'])
def start(msg):
    referal_args = msg.text.replace('/start', '').replace(' ', '')
    if referal_args != '':
        Referals.new(referal_args, msg.from_user.id)

    Users.new(msg.from_user.id)
    keyboardtosend = start_keyboard

    user_sub = Subscribers.query.get(msg.from_user.id)
    if user_sub:
        if user_sub.date_to_payment > time.time():
            keyboardtosend = paymented_start_keyboard
        else:
            keyboardtosend = start_keyboard
    if not user_sub:
        keyboardtosend = start_keyboard

    bot.send_message(
        msg.from_user.id,
        messages['start'].format(first_name=msg.from_user.first_name),
        reply_markup=keyboardtosend
    )


@bot.message_handler(commands=['admin'])
@admin
def admin_interface(msg):
    bot.send_message(msg.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=admin_keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'admin|messages')
def send_messages_to_subs(call):
    bot.send_message(call.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∏–ø —Å–ø–æ—Ä—Ç–∞: —Ö–æ–∫–∫–µ–π, —Ç–µ–Ω–Ω–∏—Å, —Ñ—É—Ç–±–æ–ª, –±–∞—Å–∫–µ—Ç–±–æ–ª–ª')
    update_state(call.from_user.id, 'admin|messages|sport')


@bot.message_handler(func=lambda msg: get_state(msg.from_user.id) == 'admin|messages|sport')
def send_messages_to_subs_sport(msg):
    if msg.text.lower() in ['—Ö–æ–∫–∫–µ–π', '—Ç–µ–Ω–Ω–∏—Å', '—Ñ—É—Ç–±–æ–ª', '–±–∞—Å–∫–µ—Ç–±–æ–ª–ª']:
        sport = ''
        if msg.text.lower() == '—Ö–æ–∫–∫–µ–π':
            sport = 'hokkey'
        if msg.text.lower() == '—Ç–µ–Ω–Ω–∏—Å':
            sport = 'tennis'
        if msg.text.lower() == '—Ñ—É—Ç–±–æ–ª':
            sport = 'football'
        if msg.text.lower() == '–±–∞—Å–∫–µ—Ç–±–æ–ª–ª':
            sport = 'basketboll'

        update_state(msg.from_user.id, f'admin|messages|text|{sport}')

        bot.send_message(msg.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.')

    else:
        bot.send_message(msg.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑, –æ—à–∏–±–∫–∞.')


@bot.message_handler(
    func=lambda msg: type(get_state(msg.from_user.id)) == str and get_state(msg.from_user.id).startswith(
        'admin|messages|text'))
def send_messages_to_subs_text(msg):
    adm, ms, t, sport = get_state(msg.from_user.id).split('|')

    all_subs = Subscribers.query.all()
    for sub in all_subs:
        if sub.date_to_payment > int(time.time()):
            try:
                bot.send_message(sub.id, msg.text)
            except:
                pass

    newsletter = NewsLetters(sport_category=sport, text=msg.text)
    session.add(newsletter)
    session.commit()
    bot.send_message(msg.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.')
    update_state(msg.from_user.id, '')


@bot.callback_query_handler(func=lambda call: call.data == 'admin|sportstats')
def add_sportstats(call):
    bot.send_message(call.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Ä—Ç–∞: —Ö–æ–∫–∫–µ–π, —Ç–µ–Ω–Ω–∏—Å, —Ñ—É—Ç–±–æ–ª, –±–∞—Å–∫–µ—Ç–±–æ–ª–ª')
    update_state(call.from_user.id, 'admin|sportstats|sport')


@bot.message_handler(
    func=lambda msg: type(get_state(msg.from_user.id)) == str and get_state(msg.from_user.id).startswith(
        'admin|sportstats|sport'))
def add_sportstats(msg):
    if msg.text.lower() in ['—Ö–æ–∫–∫–µ–π', '—Ç–µ–Ω–Ω–∏—Å', '—Ñ—É—Ç–±–æ–ª', '–±–∞—Å–∫–µ—Ç–±–æ–ª–ª']:
        sport = ''
        if msg.text.lower() == '—Ö–æ–∫–∫–µ–π':
            sport = 'hokkey'
        if msg.text.lower() == '—Ç–µ–Ω–Ω–∏—Å':
            sport = 'tennis'
        if msg.text.lower() == '—Ñ—É—Ç–±–æ–ª':
            sport = 'football'
        if msg.text.lower() == '–±–∞—Å–∫–µ—Ç–±–æ–ª–ª':
            sport = 'basketboll'

        bot.send_message(msg.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏')
        update_state(msg.from_user.id, f'admin|sportstats|name|{sport}')

    else:
        bot.send_message(msg.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑, –æ—à–∏–±–∫–∞.')


@bot.message_handler(
    func=lambda msg: type(get_state(msg.from_user.id)) == str and get_state(msg.from_user.id).startswith(
        'admin|sportstats|name'))
def add_sportstats_name(msg):
    adm, ss, n, sport = get_state(msg.from_user.id).split('|')
    bot.send_message(msg.from_user.id, '–ò–º—è –ø—Ä–∏–Ω—è—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.')
    update_state(msg.from_user.id, f'admin|sportstats|link|{sport}|{msg.text}')


@bot.message_handler(
    func=lambda msg: type(get_state(msg.from_user.id)) == str and get_state(msg.from_user.id).startswith(
        'admin|sportstats|link'))
def add_sportstats_link(msg):
    ad, sp, li, sport, name = get_state(msg.from_user.id).split('|')
    link = msg.text

    sportstats = SportStats(category=sport, name=name, link=link)
    session.add(sportstats)
    session.commit()
    bot.send_message(msg.from_user.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ.')
    update_state(msg.from_user.id, '')


@bot.callback_query_handler(func=lambda call: call.data == 'admin|subscribe')
def add_subscribes(call):
    bot.send_message(call.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏')
    update_state(call.from_user.id, 'admin|subscribe|name')


@bot.message_handler(func=lambda msg: get_state(msg.from_user.id) == 'admin|subscribe|name')
def add_subscribes_name(msg):
    name = msg.text
    bot.send_message(msg.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä—É–±–ª—è—Ö')
    update_state(msg.from_user.id, f'admin|subscribe|price|{name}')


@bot.message_handler(
    func=lambda msg: type(get_state(msg.from_user.id)) == str and get_state(msg.from_user.id).startswith(
        'admin|subscribe|price'))
def add_subscribes_price(msg):
    ad, sub, p, name = get_state(msg.from_user.id).split('|')
    price = msg.text
    bot.send_message(msg.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —Å—É—Ç–∫–∏ - 86400—Å–µ–∫)')
    update_state(msg.from_user.id, f'admin|subscribe|time|{name}|{price}')


@bot.message_handler(
    func=lambda msg: type(get_state(msg.from_user.id)) == str and get_state(msg.from_user.id).startswith(
        'admin|subscribe|time'))
def add_subscribes_time(msg):
    ad, sub, p, name, price = get_state(msg.from_user.id).split('|')
    time = msg.text
    bot.send_message(msg.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∏–∫—Å —Å—É–º–º—É –≤ —Ü–∏—Ñ—Ä–∞—Ö –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –±—É–¥—É—Ç')
    update_state(msg.from_user.id, f'admin|subscribe|to_ref|{name}|{price}|{time}')


@bot.message_handler(
    func=lambda msg: type(get_state(msg.from_user.id)) == str and get_state(msg.from_user.id).startswith(
        'admin|subscribe|to_ref'))
def add_subscribes_toref(msg):
    ad, sub, p, name, price, time = get_state(msg.from_user.id).split('|')
    to_ref = msg.text

    subscribe = Subscribes(
        name=name,
        price=price,
        time=time,
        to_ref_money=to_ref
    )

    session.add(subscribe)
    session.commit()
    update_state(msg.from_user.id, '')

    bot.send_message(msg.from_user.id, '–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.')


@bot.callback_query_handler(func=lambda call: call.data == 'admin|editref')
def admin_editref(call):
    subscribes = Subscribes.query.all()
    if subscribes:
        keyboard = generate_editref_keyboard(subscribes)
        bot.send_message(call.from_user.id,
                         '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞–ª–æ–≤',
                         reply_markup=keyboard)

    if not subscribes:
        bot.send_message(call.from_user.id, '–¢–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç.')


@bot.callback_query_handler(func=lambda call: call.data.startswith('admin|editref|'))
def admin_editref_sub(call):
    d, er, sid = call.data.split('|')
    sub = Subscribes.query.get(int(sid))
    if sub:
        bot.send_message(call.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∏–∫—Å —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö')
        update_state(call.from_user.id, f'admin|editref|{sid}')

    if not sub:
        bot.send_message(call.from_user.id, '–¢–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç.')


@bot.message_handler(
    func=lambda msg: type(get_state(msg.from_user.id)) == str and get_state(msg.from_user.id).startswith(
        'admin|editref'))
def admin_editref_toref(msg):
    ad, er, sid = get_state(msg.from_user.id).split('|')
    sub = Subscribes.query.get(int(sid))
    sub.to_ref_money = int(msg.text)
    session.add(sub)

    session.commit()

    bot.send_message(msg.from_user.id, '–ù–∞–≥—Ä–∞–¥–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.')
    update_state(msg.from_user.id, '')


@bot.callback_query_handler(func=lambda call: call.data == 'admin|msgforall')
def msgs_for_all(msg):
    bot.send_message(msg.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    update_state(msg.from_user.id, 'admin|mfa')


@bot.message_handler(func=lambda msg: get_state(msg.from_user.id) == 'admin|mfa')
def msgs_for_all_text(msg):
    users = Users.query.all()

    bot.send_message(msg.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.')

    for user in users:
        try:
            bot.send_message(user.id, msg.text)
        except:
            pass

    bot.send_message(msg.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
    update_state(msg.from_user.id, '')


@bot.callback_query_handler(func=lambda call: call.data == 'admin|addsubus')
def admin_usbaausand(call):
    update_state(call.from_user.id, 'admin|usbusadd')
    bot.send_message(call.from_user.id, '–ü—Ä–∏—à–ª–∏—Ç–µ ID —á–µ–ª–æ–≤–µ–∫–∞.')


@bot.message_handler(func=lambda msg: get_state(msg.from_user.id) == 'admin|usbusadd')
def admin_adduspro2(msg):
    id = int(msg.text)
    update_state(msg.from_user.id, f'admin|usbusadd|{id}')
    subs = Subscribes.query.all()
    markup = InlineKeyboardMarkup()
    for i in subs:
        markup.row(InlineKeyboardButton(text=i.name, callback_data=f'admin|usbusadd|{i.sid}'))
    bot.send_message(msg.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('admin|usbusadd|'))
def admin_addsubpro3(call):
    sid = call.data.split('|')[-1]
    uid = get_state(call.from_user.id).split('|')[-1]
    sub = Subscribes.query.get(int(sid))
    accept_payment(sub.price, int(uid), int(sid))
    bot.send_message(call.from_user.id, '–í—ã–¥–∞–Ω–æ')
    update_state(call.from_user.id, '')


# @bot.callback_query_handler(func = lambda call: call.data == 'admin|editmsgs')
# def
#
# @bot.callback_query_handler(func = lambda call: call.data == 'admin|deleteuspro')


@bot.message_handler(func=lambda msg: msg.text == '‚ö°Ô∏è –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞')
def actual_bet_function(msg):
    user_sub = Subscribers.query.get(msg.from_user.id)
    if user_sub:
        if user_sub.date_to_payment >= int(time.time()):
            bot.send_message(msg.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞.', reply_markup=sportstats_keyboard)
            update_back_state(msg.from_user.id, 1)
            update_state(msg.from_user.id, 'actualbets')

        else:
            bot.send_message(msg.from_user.id, '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.')
    else:
        bot.send_message(msg.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.')


@bot.message_handler(func=lambda msg: msg.text == 'üéæ –¢–µ–Ω–Ω–∏—Å' and get_state(msg.from_user.id) == 'actualbets')
def actual_bets_tennis(msg):
    last_bet = NewsLetters.query.order_by(desc(NewsLetters.nlid)).filter_by(sport_category='tennis').limit(1).first()
    if last_bet:
        bot.send_message(msg.from_user.id, last_bet.text)

    if not last_bet:
        bot.send_message(msg.from_user.id, '–ü–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –Ω–µ—Ç.')


@bot.message_handler(func=lambda msg: msg.text == '‚öΩÔ∏è –§—É—Ç–±–æ–ª' and get_state(msg.from_user.id) == 'actualbets')
def actual_bets_tennis(msg):
    last_bet = NewsLetters.query.order_by(desc(NewsLetters.nlid)).filter_by(sport_category='football').limit(1).first()
    if last_bet:
        bot.send_message(msg.from_user.id, last_bet.text)

    if not last_bet:
        bot.send_message(msg.from_user.id, '–ü–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –Ω–µ—Ç.')


@bot.message_handler(func=lambda msg: msg.text == 'üèí –•–æ–∫–∫–µ–π' and get_state(msg.from_user.id) == 'actualbets')
def actual_bets_tennis(msg):
    last_bet = NewsLetters.query.order_by(desc(NewsLetters.nlid)).filter_by(sport_category='hokkey').limit(1).first()
    if last_bet:
        bot.send_message(msg.from_user.id, last_bet.text)

    if not last_bet:
        bot.send_message(msg.from_user.id, '–ü–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –Ω–µ—Ç.')


@bot.message_handler(func=lambda msg: msg.text == 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª' and get_state(msg.from_user.id) == 'actualbets')
def actual_bets_bb(msg):
    last_bet = NewsLetters.query.order_by(desc(NewsLetters.nlid)).filter_by(sport_category='basketboll').limit(1).first()
    if last_bet:
        bot.send_message(msg.from_user.id, last_bet.text)

    if not last_bet:
        bot.send_message(msg.from_user.id, '–ü–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –Ω–µ—Ç.')


@bot.message_handler(func=lambda msg: msg.text == 'üíé –ü–æ–¥–ø–∏—Å–∫–∞')
def subscribing_function(msg):
    keyboard = generate_subscribe_vars_keyboard()
    print(keyboard)
    if keyboard:
        bot.send_message(msg.from_user.id, '''üí≥–¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É —É–∫–∞–∑–∞–Ω—ã –≤ —Ä—É–±–ª—è—Ö. –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞–ª—é—Ç–æ–π, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π –ø–∏—à–∏—Ç–µ –º–Ω–µ @alex_rico

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:''', reply_markup=keyboard)
        update_back_state(msg.from_user.id, 1)
        update_state(msg.from_user.id, 'subscribe')

    if not keyboard:
        bot.send_message(msg.from_user.id, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç.')


@bot.message_handler(func=lambda msg: get_state(msg.from_user.id) == 'subscribe')
def generate_url_for_buy_subscribe(msg):
    sub = Subscribes.query.filter_by(name=msg.text).first()
    if sub:
        bot.send_message(msg.from_user.id, msg.text, reply_markup=generate_buy_keyboard(sub.sid, msg.from_user.id))

    if not sub:
        bot.send_message(msg.from_user.id, '–¢–∞–∫–æ–≥–æ –≤–∏–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')


@bot.message_handler(func=lambda msg: msg.text == 'üç¨ –ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')
def bonusprogramm_function(msg):
    bot.send_message(msg.from_user.id, '''–ë–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∞—à–µ–π –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–±–µ —Ö–æ—Ä–æ—à–∏–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –∑–∞ —Å—á–µ—Ç –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ (85% –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫). –¶–∏–∫–ª—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞—Ö–æ–¥—è—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –∞–∫—Ç–∏–≤–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è —Å –Ω–∞–º–∏.üëå

üí∞ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: 50%
‚ö°Ô∏è –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å: –æ–±—ã—á–Ω—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç (–µ—Å–ª–∏ –∫–æ–ª-–≤–æ –∫—É–ø–∏–≤—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–∏—Ñ—Ä—É 10 - —Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å—Ç–∞—Ç—É—Å VIP, –º—ã –ø–æ–≤—ã—à–∞–µ–º —Ç–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ 60%!)
üì§ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 2000 —Ä—É–±.''', reply_markup=bonus_keyboard)
    update_back_state(msg.from_user.id, 1)


@bot.message_handler(func=lambda msg: msg.text == 'üí∞–ë–∞–ª–∞–Ω—Å')
def balance_function(msg):
    user = Users.get(msg.from_user.id)
    bot.send_message(msg.from_user.id, f'–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±–ª–µ–π.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(Referals.get_by_owner(msg.from_user.id))}')


@bot.message_handler(func=lambda msg: msg.text == 'üí∏–í—ã–≤–æ–¥')
def outputmoney_function(msg):
    user = Users.get(msg.from_user.id)
    if user.balance >= 2000:
        bot.send_message(msg.from_user.id, '–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞.')
        update_state(msg.from_user.id, 'balance|1|amount')

    if user.balance <= 2000:
        bot.send_message(msg.from_user.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 2000 —Ä—É–±.')


@bot.message_handler(func=lambda msg: get_state(msg.from_user.id) == 'balance|1|amount')
def outputamount_function(msg):
    to_output = msg.text
    try:
        to_output = int(to_output)
        bot.send_message(msg.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏.')
        update_state(msg.from_user.id, f'balance|2|amount|{to_output}')
    except Exception as e:
        print(e)
        bot.send_message(msg.from_user.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ü–∏—Ñ—Ä–∞–º–∏.')


@bot.message_handler(
    func=lambda msg: type(get_state(msg.from_user.id)) == str and get_state(msg.from_user.id).startswith(
        'balance|2|amount|'))
def output_data_function(msg):
    bal, se, am, amount = get_state(msg.from_user.id)
    bot.send_message(msg.from_user.id, '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.')

    adm_notify_text = f'''–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id={msg.from_user.id}">{msg.from_user.first_name}</a>
–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {amount}
–†–µ–∫–≤–∏–∑–∏—Ç—ã: {msg.text}'''

    for adm in admins:
        bot.send_message(adm, adm_notify_text, reply_markup=generate_output_keyboard(msg.from_user.id, amount))


@bot.message_handler(func=lambda msg: msg.text == 'üë•–†–µ—Ñ–µ—Ä–∞–ª—ã')
def referalsee_function(msg):
    user = Users.get(msg.from_user.id)
    bot.send_message(msg.from_user.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(Referals.get_by_owner(msg.from_user.id))}')


@bot.message_handler(func=lambda msg: msg.text == 'üìå–†–µ—Ñ. —Å—Å—ã–ª–∫–∞')
def referallink_function(msg):
    username = bot.get_me().username
    link = f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/{username}?start={msg.from_user.id}'
    bot.send_message(msg.from_user.id, link)


@bot.message_handler(func=lambda msg: msg.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def sportstats_function(msg):
    bot.send_message(msg.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.', reply_markup=sportstats_keyboard)
    update_back_state(msg.from_user.id, 1)


@bot.message_handler(func=lambda msg: msg.text == 'üéæ –¢–µ–Ω–Ω–∏—Å')
def tennis_ss_func(msg):
    keyboard = generate_sportstats_keyboard('tennis')
    if keyboard:
        bot.send_message(msg.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü.', reply_markup=keyboard)

    if not keyboard:
        bot.send_message(msg.from_user.id, '–ü–æ –¥–∞–Ω–Ω–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')


@bot.message_handler(func=lambda msg: msg.text == '‚öΩÔ∏è –§—É—Ç–±–æ–ª')
def football_ss_func(msg):
    keyboard = generate_sportstats_keyboard('football')
    if keyboard:
        bot.send_message(msg.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü.', reply_markup=keyboard)

    if not keyboard:
        bot.send_message(msg.from_user.id, '–ü–æ –¥–∞–Ω–Ω–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')


@bot.message_handler(func=lambda msg: msg.text == 'üèí –•–æ–∫–∫–µ–π')
def hokkey_ss_func(msg):
    keyboard = generate_sportstats_keyboard('hokkey')
    if keyboard:
        bot.send_message(msg.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü.', reply_markup=keyboard)

    if not keyboard:
        bot.send_message(msg.from_user.id, '–ü–æ –¥–∞–Ω–Ω–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')


@bot.message_handler(func=lambda msg: msg.text == 'üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª')
def bb_ss_func(msg):
    keyboard = generate_sportstats_keyboard('basketboll')
    if keyboard:
        bot.send_message(msg.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü.', reply_markup=keyboard)

    if not keyboard:
        bot.send_message(msg.from_user.id, '–ü–æ –¥–∞–Ω–Ω–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')


@bot.message_handler(func=lambda msg: msg.text == 'üÜò –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞')
def support_function(msg):
    bot.send_message(msg.from_user.id, messages['tech_help'])


@bot.message_handler(func=lambda msg: msg.text == 'ü§ñ –û –±–æ—Ç–µ')
def about_function(msg):
    bot.send_message(msg.from_user.id, messages['about_bot'])


@bot.message_handler(func=lambda msg: msg.text == 'üí°–°–æ–≤–µ—Ç')
def advice_function(msg):
    bot.send_message(msg.from_user.id, messages['advice'], parse_mode='Markdown', disable_web_page_preview=True)


@bot.message_handler(func=lambda msg: msg.text == 'üì± –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–∞–Ω–∫–∞')
def calc_budget(msg):
    update_state(msg.from_user.id, 'calc|budget')
    bot.send_message(msg.from_user.id,
                     '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –ú–∏–Ω–∏–º—É–º 1000‚ÇΩ.')


@bot.message_handler(func=lambda msg: get_state(msg.from_user.id) == 'calc|budget')
def calc_bugdet_second(msg):
    try:
        budget = int(msg.text)
        if budget >= 1000:
            update_state(msg.from_user.id, f'calc|chooset|{budget}')
            bot.send_message(msg.from_user.id, '''*3-4 –°–¢–ê–í–û–ö. –í–´–°–û–ö–ò–ô –£–†–û–í–ï–ù–¨ –†–ò–°–ö–ê –ò –î–û–•–û–î–ù–û–°–¢–ò.*
–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –±–∞–Ω–∫–∞, –Ω–æ —Ä–∏—Å–∫ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π. –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç 500%.

*5-6 –°–¢–ê–í–û–ö. –°–†–ï–î–ù–ò–ô –£–†–û–í–ï–ù–¨ –†–ò–°–ö–ê –ò –î–û–•–û–î–ù–û–°–¢–ò.*
–°–∞–º–∞—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è. –†–∏—Å–∫ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –æ–∫—É–ø–∞–µ—Ç —Å–≤–æ–∏ –≤–ª–æ–∂–µ–Ω–∏—è. –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç 200%.

*7-8 –°–¢–ê–í–û–ö. –ù–ò–ó–ö–ò–ô –£–†–û–í–ï–ù–¨ –†–ò–°–ö–ê –ò –î–û–•–û–î–ù–û–°–¢–ò.*
–°–∞–º–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏ –Ω–∏–∑–∫–æ –¥–æ—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è. –¢–∏—à–µ –µ–¥–µ—à—å - –¥–∞–ª—å—à–µ –±—É–¥–µ—à—å. –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –æ—Ç 100%.

–ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫''', parse_mode='Markdown')
        else:
            bot.send_message(msg.from_user.id, '–ú–∏–Ω–∏–º—É–º 1–∫.')
    except Exception as e:
        print(e)
        bot.send_message(msg.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ü–∏—Ñ—Ä–∞—Ö.')


@bot.message_handler(
    func=lambda msg: get_state(msg.from_user.id) is not None and get_state(msg.from_user.id).startswith('calc|chooset'))
def calc_budget_calc(msg):
    try:
        count = int(msg.text)
        budget = get_state(msg.from_user.id).split('|')[-1]
        if count in range(3, 9):
            text = ''
            stavki = generate_bugdet(count, int(budget))
            for s in range(len(stavki)):
                text = text + f'{s + 1} —Å—Ç–∞–≤–∫–∞: {int(stavki[s])}—Ä—É–±.\n'

            bot.send_message(msg.from_user.id, text)
            bot.send_message(msg.from_user.id, '–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ.')
            update_state(msg.from_user.id, '')

        else:
            bot.send_message(msg.from_user.id, '–í–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ - –æ—Ç 3 –¥–æ 8. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ü–∏—Ñ—Ä–∞—Ö.')
    except Exception as e:
        print(e)
        bot.send_message(msg.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –≤  —Ü–∏—Ñ—Ä–∞—Ö.')


int_back_funcs = {
    1: start
}

bot.remove_webhook()
time.sleep(2)
bot.set_webhook(WEBHOOK_URL)

app.run(host=WEBHOOK_LISTEN, port=WEBHOOK_PORT, debug=True)
'''while True:
    try:
        bot.polling()
    except Exception as e:
        bot.stop_polling()
        sleep(0.5)'''
